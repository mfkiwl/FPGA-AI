/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <math.h>
#include <stdlib.h>
//#include <iostream>
//#include <fstream>
#include <stdio.h>
//#include <string>
#include<time.h>


#include "platform.h"
#include "xil_printf.h"
#include "stdlib.h"
#include "xil_types.h"
#include "xil_io.h"
#include "xparameters.h"
#include "xstatus.h"
#include "sleep.h"
#include "xscugic.h"
#include "xil_exception.h"

#include "ps_pl.h"

//using namespace std;

#define 	INT_CFG0_OFFSET 		0x00000C00  //0x00000C0C ICDICFR3 Register int_id is 48 to 63
#define 	INT_ID 					XPS_FPGA0_INT_ID
#define 	INTC_DEVICE_ID 			XPAR_PS7_SCUGIC_0_DEVICE_ID
#define 	INT_TYPE_RISING_EDGE 	0x03
#define 	INT_TYPE_HIGHLEVEL 		0x01
#define 	INT_MASK 				0x03

XScuGic INTCInst;

/*intc handler func */
static void Intc_Handler(void *para)
{
	u8 DATA = 0;


	//set parameters
	    int dat_dim=10;
	    int lay1_dim=20;
	    int lab_dim=2;
	    int num_samples=1;

	    //timer[0].start();
	    clock_t startTime,endTime1,endTime2;
		startTime = clock();

	//load data
		int data[num_samples][dat_dim];
		for(int i=0;j<num_samples;j++){
		for (int j=0;i<dat_dim;i++)
		{
			DATA = Xil_In32(COUNTER_DATA);
			printf("data is %d\n",DATA);
			data[i][j]=DATA;
		}
		}

	//load bias
	    float bias1[lay1_dim],bias2[lab_dim];

	    //ifstream file("bias.txt");
	    FILE *bias;  //float data in txt, ifstream: hard to tranvert data type from str to float(atof)
	    bias = fopen("bias.txt","r");
	    float temp;
	    for (int i=0;i<lay1_dim;i++)
	    if(fscanf(bias,"%lf",&temp)!=EOF)
	    bias1[i]=(float)temp;
	    //cout<<x;

	    //cout<<'\n';

	    for (int i=0;i<lab_dim;i++)
	    if(fscanf(bias,"%lf",&temp)!=EOF)
	    bias2[i]=(float)temp;
	    //cout<<x;
	    fclose(bias);

	//load weights
	    float mat_dat_lay1[dat_dim][lay1_dim];
	    float mat_lay1_lab[lay1_dim][lab_dim];

	    FILE *weights;  //float data in txt, ifstream: hard to tranvert data type from str to float(atof)
	    weights = fopen("weights.txt","r");
	    for (int i=0;i<dat_dim;i++)
	        for (int j=0;j<lay1_dim;j++){
	            if(fscanf(weights,"%lf",&temp)!=EOF)
	            mat_dat_lay1[i][j]=(float)temp;
	        }

	    for (int i=0;i<lay1_dim;i++)
	        for (int j=0;j<lab_dim;j++){
	            if(fscanf(weights,"%lf",&temp)!=EOF)
	            mat_lay1_lab[i][j]=(float)temp;
	        }
	    fclose(weights);
	    endTime1 = clock();

	//run matrix multiplication

	    float lay1[lay1_dim];
	    float lable[lab_dim];
	    float lable_[lab_dim];


	    for (int k=0;k<num_samples;k++){
	        for(int i=0;i<lay1_dim;i++){
	            lay1[i]=0;
	            for(int j=0;j<dat_dim;j++){
	                lay1[i]+=mat_dat_lay1[j][i]*data[k][j];  //get lay1 value

	            }
	            lay1[i]=relu(lay1[i]+bias1[i]);   //nonlinear activation function

	        }
	        for(int i=0;i<lab_dim;i++){
	            lable[i]=0;
	            for(int j=0;j<lay1_dim;j++){
	                lable[i]+=mat_lay1_lab[j][i]*lay1[j];

	            }
	            lable[i]+=bias2[i];
	            lable_[i]=relu(lable[i]);

	        }
	        if (lable_[0]>=lable_[1]){
	        	Xil_Out8(BRIGHT,0);
	        }
	        else
	        {
	        	Xil_Out8(BRIGHT,1);
	        }

            //cout<<"Errors:"<<' '<<err<<endl;
            //cout<<"Total:"<<' '<<num_samples<<endl;

            endTime2 = clock();
               // cout << "Load Time : " <<(double)(endTime1 - startTime) / CLOCKS_PER_SEC << "s" << endl;
               // cout << "Computation Time : " <<(double)(endTime2 - endTime1) / CLOCKS_PER_SEC << "s" << endl;
            //timer[0].stop();
            //cout<<timer[0].get_time();

}
}

/*set triger type*/
void Intc_Trig_Setup(XScuGic *InstancePtr, int intId, int intType)
{
	u32 mask;
	mask = XScuGic_DistReadReg(InstancePtr,INT_CFG0_OFFSET + (intId/16)*4);
	mask &= ~(INT_MASK << (intId%16)*2);
	mask |= intType << ((intId%16)*2);
	XScuGic_DistWriteReg(InstancePtr,INT_CFG0_OFFSET + (intId/16)*4, mask);
	mask = XScuGic_DistReadReg(InstancePtr,INT_CFG0_OFFSET + (intId/16)*4);
}

/*intc initial*/
int Intc_Init(u16 DeviceId)
{
	XScuGic_Config *IntcConfig;
	int status;

	//Interrupt controller initialization
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	if(IntcConfig == NULL)
	{
		printf("XScuGic_LookupConfig is failed\n");
		return XST_FAILURE;
	}

	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS)
	{
		printf("XScuGic_CfgInitialize is dailed\n");
		return XST_FAILURE;
	}

	//Exception Handler
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,&INTCInst);
	Xil_ExceptionEnable();

	//Register interrupt to handler
	status = XScuGic_Connect(&INTCInst,INT_ID,(Xil_ExceptionHandler)Intc_Handler,(void *)NULL);
	if(status != XST_SUCCESS)
	{
		printf("XScuGic_Connect is dailed\n");
		return XST_FAILURE;
	}

	//Set interrupt trigger type to rising edge
	Intc_Trig_Setup(&INTCInst,INT_ID,INT_TYPE_RISING_EDGE);

	//Enable interrupts in the controller
	XScuGic_Enable(&INTCInst,INT_ID);

	return XST_SUCCESS;
}

int main()
{
	int status;
    init_platform();
    printf("Hello World\n");

    status = Intc_Init(INTC_DEVICE_ID);
    if(status != XST_SUCCESS)
    {
    	printf("INT initial is failed\n");
    	return XST_FAILURE;
    }

    while(1)
    {
    	usleep(1);
    }

    cleanup_platform();

    return XST_SUCCESS;
}
